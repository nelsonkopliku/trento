// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TagsService is an autogenerated mock type for the TagsService type
type TagsService struct {
	mock.Mock
}

// Create provides a mock function with given fields: value, resourceType, resourceId
func (_m *TagsService) Create(value string, resourceType string, resourceId string) error {
	ret := _m.Called(value, resourceType, resourceId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(value, resourceType, resourceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: value, resourceType, resourceId
func (_m *TagsService) Delete(value string, resourceType string, resourceId string) error {
	ret := _m.Called(value, resourceType, resourceId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(value, resourceType, resourceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: resourceTypeFilter
func (_m *TagsService) GetAll(resourceTypeFilter ...string) ([]string, error) {
	_va := make([]interface{}, len(resourceTypeFilter))
	for _i := range resourceTypeFilter {
		_va[_i] = resourceTypeFilter[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	if rf, ok := ret.Get(0).(func(...string) []string); ok {
		r0 = rf(resourceTypeFilter...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(resourceTypeFilter...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByResource provides a mock function with given fields: resourceType, resourceId
func (_m *TagsService) GetAllByResource(resourceType string, resourceId string) ([]string, error) {
	ret := _m.Called(resourceType, resourceId)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(resourceType, resourceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(resourceType, resourceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
